--- meson.build	2022-07-16 01:42:47.000000000 +0800
+++ meson.build	2023-09-01 10:17:08.720036481 +0800
@@ -182,10 +188,31 @@
 system_has_kms_drm = ['openbsd', 'netbsd', 'freebsd', 'gnu/kfreebsd', 'dragonfly', 'linux', 'sunos'].contains(host_machine.system())
 
 dri_drivers = get_option('dri-drivers')
+if dri_drivers.contains('auto')
+  if system_has_kms_drm
+    # TODO: PPC, Sparc
+    if ['x86', 'x86_64'].contains(host_machine.cpu_family())
+      dri_drivers = ['pvr']
+    elif ['arm', 'aarch64', 'mips', 'mips64', 'riscv64'].contains(host_machine.cpu_family())
+      dri_drivers = ['pvr']
+    else
+      error('Unknown architecture @0@. Please pass -Ddri-drivers to set driver options. Patches gladly accepted to fix this.'.format(
+            host_machine.cpu_family()))
+    endif
+  elif ['darwin', 'windows', 'cygwin', 'haiku'].contains(host_machine.system())
+    # only swrast would make sense here, but gallium swrast is a much better default
+    dri_drivers = []
+  else
+    error('Unknown OS @0@. Please pass -Ddri-drivers to set driver options. Patches gladly accepted to fix this.'.format(
+          host_machine.system()))
+  endif
+endif
 if dri_drivers.length() != 0
-  error('Mesa\'s main branch no longer has any "classic" drivers, use the "amber" branch instead.')
+  warning('Mesa\'s main branch no longer has any "classic" drivers, use the "amber" branch instead.')
 endif
 
+with_dri_pvr = dri_drivers.contains('pvr')
+
 with_dri = dri_drivers.length() != 0
 
 gallium_drivers = get_option('gallium-drivers')
@@ -1024,6 +1067,19 @@
   ]
 endif
 
+if with_platform_tizen
+  dep_dlog = dependency('dlog')
+  dep_tizen = [
+    dep_dlog,
+    dependency('libtbm'),
+    dependency('tpl-egl'),
+  ]
+  pre_args += '-DHAVE_TIZEN_PLATFORM'
+endif
+if with_platform_null
+  pre_args += '-DHAVE_NULL_PLATFORM'
+endif
+
 prog_python = import('python').find_installation('python3')
 has_mako = run_command(
   prog_python, '-c',
@@ -1657,7 +1720,8 @@
 dep_libdrm = dependency(
   'libdrm', version : '>=' + _drm_ver,
   # GNU/Hurd includes egl_dri2, without drm.
-  required : (with_dri2 and host_machine.system() != 'gnu') or with_dri3
+  required : (with_dri2 and host_machine.system() != 'gnu') or with_dri3 or
+             with_platform_tizen or with_platform_null
 )
 if dep_libdrm.found()
   pre_args += '-DHAVE_LIBDRM'
