--- src/egl/drivers/dri2/platform_wayland.c	2022-07-16 01:42:47.000000000 +0800
+++ src/egl/drivers/dri2/platform_wayland.c	2023-09-01 10:16:24.089203638 +0800
@@ -1188,7 +1309,7 @@
       use_flags |= __DRI_IMAGE_USE_PROTECTED;
    }
 
-   if (dri2_dpy->is_different_gpu && dri2_surf->back->linear_copy == NULL) {
+   if (dri2_dpy->is_different_gpu && !num_modifiers && dri2_surf->back->linear_copy == NULL) {
       create_dri_image_diff_gpu(dri2_surf, linear_dri_image_format, use_flags);
       if (dri2_surf->back->linear_copy == NULL)
           return -1;
@@ -1294,7 +1434,7 @@
           dri2_surf->color_buffers[i].age > BUFFER_TRIM_AGE_HYSTERESIS) {
          wl_buffer_destroy(dri2_surf->color_buffers[i].wl_buffer);
          dri2_dpy->image->destroyImage(dri2_surf->color_buffers[i].dri_image);
-         if (dri2_dpy->is_different_gpu)
+         if (dri2_surf->color_buffers[i].linear_copy)
             dri2_dpy->image->destroyImage(dri2_surf->color_buffers[i].linear_copy);
          dri2_surf->color_buffers[i].wl_buffer = NULL;
          dri2_surf->color_buffers[i].dri_image = NULL;
@@ -1711,7 +1893,7 @@
    if (!dri2_surf->current->wl_buffer) {
       __DRIimage *image;
 
-      if (dri2_dpy->is_different_gpu)
+      if (dri2_surf->current->linear_copy)
          image = dri2_surf->current->linear_copy;
       else
          image = dri2_surf->current->dri_image;
@@ -1738,11 +1920,14 @@
    /* If the compositor doesn't support damage_buffer, we deliberately
     * ignore the damage region and post maximum damage, due to
     * https://bugs.freedesktop.org/78190 */
-   if (!n_rects || !try_damage_buffer(dri2_surf, rects, n_rects))
+   if (dri2_dpy->is_different_gpu ||
+       !n_rects || !try_damage_buffer(dri2_surf, rects, n_rects))
       wl_surface_damage(dri2_surf->wl_surface_wrapper,
                         0, 0, INT32_MAX, INT32_MAX);
 
-   if (dri2_dpy->is_different_gpu) {
+   dri2_flush_drawable_for_swapbuffers(disp, draw);
+
+   if (dri2_surf->current->linear_copy) {
       _EGLContext *ctx = _eglGetCurrentContext();
       struct dri2_egl_context *dri2_ctx = dri2_egl_context(ctx);
       dri2_dpy->image->blitImage(dri2_ctx->dri_context,
@@ -1751,10 +1936,9 @@
                                  0, 0, dri2_surf->base.Width,
                                  dri2_surf->base.Height,
                                  0, 0, dri2_surf->base.Width,
-                                 dri2_surf->base.Height, 0);
+                                 dri2_surf->base.Height, __BLIT_FLAG_FLUSH);
    }
 
-   dri2_flush_drawable_for_swapbuffers(disp, draw);
    dri2_dpy->flush->invalidate(dri2_surf->dri_drawable);
 
    wl_surface_commit(dri2_surf->wl_surface_wrapper);
@@ -2245,12 +2439,14 @@
 {
    _EGLDevice *dev;
    struct dri2_egl_display *dri2_dpy;
+   int fd_old;
 
    dri2_dpy = calloc(1, sizeof *dri2_dpy);
    if (!dri2_dpy)
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_dpy = -1;
    disp->DriverData = (void *) dri2_dpy;
 
    if (dri2_wl_formats_init(&dri2_dpy->formats) < 0)
@@ -2324,8 +2520,20 @@
          goto cleanup;
    }
 
+   fd_old = dri2_dpy->fd;
+   dri2_dpy->fd_dpy = os_dupfd_cloexec(dri2_dpy->fd);
    dri2_dpy->fd = loader_get_user_preferred_fd(dri2_dpy->fd,
                                                &dri2_dpy->is_different_gpu);
+   if (dri2_dpy->fd == fd_old) {
+      if (dri2_dpy->fd_dpy != -1)
+         close(dri2_dpy->fd_dpy);
+
+      dri2_dpy->fd_dpy = dri2_dpy->fd;
+   } else if (dri2_dpy->fd_dpy == -1) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to dup display FD");
+      goto cleanup;
+   }
+
    dev = _eglAddDevice(dri2_dpy->fd, false);
    if (!dev) {
       _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to find EGLDevice");
@@ -2889,6 +3145,7 @@
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_dpy = -1;
    disp->DriverData = (void *) dri2_dpy;
 
    if (dri2_wl_formats_init(&dri2_dpy->formats) < 0)
