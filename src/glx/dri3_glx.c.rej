--- src/glx/dri3_glx.c	2022-07-16 01:42:47.000000000 +0800
+++ src/glx/dri3_glx.c	2023-09-01 10:16:24.128204365 +0800
@@ -400,14 +414,6 @@
    pdraw->base.drawable = drawable;
    pdraw->base.psc = &psc->base;
 
-#ifdef HAVE_DRI3_MODIFIERS
-   if ((psc->image && psc->image->base.version >= 15) &&
-       (pdp->dri3Major > 1 || (pdp->dri3Major == 1 && pdp->dri3Minor >= 2)) &&
-       (pdp->presentMajor > 1 ||
-        (pdp->presentMajor == 1 && pdp->presentMinor >= 2)))
-      has_multibuffer = true;
-#endif
-
    (void) __glXInitialize(psc->base.dpy);
 
    if (loader_dri3_drawable_init(XGetXCBConnection(base->dpy),
@@ -655,6 +670,10 @@
    loader_dri3_close_screen(psc->driScreen);
    (*psc->core->destroyScreen) (psc->driScreen);
    driDestroyConfigs(psc->driver_configs);
+
+   if (psc->fd_dpy != psc->fd)
+      close(psc->fd_dpy);
+
    close(psc->fd);
    free(psc);
 }
@@ -798,16 +818,6 @@
    }
 
    for (i = 0; extensions[i]; i++) {
-      /* when on a different gpu than the server, the server pixmaps
-       * can have a tiling mode we can't read. Thus we can't create
-       * a texture from them.
-       */
-      if (!psc->is_different_gpu &&
-         (strcmp(extensions[i]->name, __DRI_TEX_BUFFER) == 0)) {
-         psc->texBuffer = (__DRItexBufferExtension *) extensions[i];
-         __glXEnableDirectExtension(&psc->base, "GLX_EXT_texture_from_pixmap");
-      }
-
       if ((strcmp(extensions[i]->name, __DRI2_FLUSH) == 0)) {
          psc->f = (__DRI2flushExtension *) extensions[i];
          /* internal driver extension, no GL extension exposed */
@@ -909,8 +946,11 @@
    struct dri3_screen *psc;
    __GLXDRIscreen *psp;
    struct glx_config *configs = NULL, *visuals = NULL;
-   char *driverName, *driverNameDisplayGPU, *tmp;
+   char *driverName = NULL, *driverNameDisplayGPU, *tmp;
    int i;
+   int fd_old;
+   bool is_different_gpu;
+   bool have_modifiers;
 
    psc = calloc(1, sizeof *psc);
    if (psc == NULL)
@@ -939,12 +980,23 @@
       return NULL;
    }
 
+   fd_old = psc->fd;
+   psc->fd_dpy = os_dupfd_cloexec(psc->fd);
    psc->fd_display_gpu = fcntl(psc->fd, F_DUPFD_CLOEXEC, 3);
-   psc->fd = loader_get_user_preferred_fd(psc->fd, &psc->is_different_gpu);
-   if (!psc->is_different_gpu) {
+   psc->fd = loader_get_user_preferred_fd(psc->fd, &is_different_gpu);
+   if (!is_different_gpu) {
       close(psc->fd_display_gpu);
       psc->fd_display_gpu = -1;
    }
+   if (psc->fd == fd_old) {
+      if (psc->fd_dpy != -1)
+         close(psc->fd_dpy);
+
+      psc->fd_dpy = psc->fd;
+   } else if (psc->fd_dpy == -1) {
+         ErrorMessageF("Unable to dup the display FD");
+         goto handle_error;
+   }
 
    driverName = loader_get_driver_for_fd(psc->fd);
    if (!driverName) {
@@ -974,27 +1026,6 @@
       goto handle_error;
    }
 
-   if (psc->is_different_gpu) {
-      driverNameDisplayGPU = loader_get_driver_for_fd(psc->fd_display_gpu);
-      if (driverNameDisplayGPU) {
-
-         /* check if driver name is matching so that non mesa drivers
-          * will not crash. Also need this check since image extension
-          * pointer from render gpu is shared with display gpu. Image
-          * extension pointer is shared because it keeps things simple.
-          */
-         if (strcmp(driverName, driverNameDisplayGPU) == 0) {
-            psc->driScreenDisplayGPU =
-               psc->image_driver->createNewScreen2(screen, psc->fd_display_gpu,
-                                                   pdp->loader_extensions,
-                                                   extensions,
-                                                   &driver_configs, psc);
-         }
-
-         free(driverNameDisplayGPU);
-      }
-   }
-
    psc->driScreen =
       psc->image_driver->createNewScreen2(screen, psc->fd,
                                           pdp->loader_extensions,
@@ -1185,6 +1251,8 @@
    if (psc->driScreenDisplayGPU)
        psc->core->destroyScreen(psc->driScreenDisplayGPU);
    psc->driScreenDisplayGPU = NULL;
+   if (psc->fd_dpy >= 0 && psc->fd_dpy != psc->fd)
+      close(psc->fd_dpy);
    if (psc->fd >= 0)
       close(psc->fd);
    if (psc->fd_display_gpu >= 0)
